- hosts: all
  become: yes
  become_method: sudo
  vars:
    jenkins_user: "jenkins"
    jenkins_user_home: "/home/{{jenkins_user}}"
    jenkins_war_url: "http://mirrors.jenkins-ci.org/war/2.0/jenkins.war"
    jenkins_war_checksum: "sha256:c883c58ba57a70371f60c44c74341e0d511f330e84c13a2499368a02ae11dd97"
    jenkins_home: "{{jenkins_user_home}}/jenkins_home"
    jenkins_port: '8080'
    jenkins_base_url: 'http://localhost:{{jenkins_port}}'
    jenkins_users:
    - { name: 'admin', password: 'admin', root: 'true' }
    jenkins_organization_folders:
    - { name: "github-organization-folder",
        organization: 'jenkins-pipeline-code',
        api_token: "a451c21092aba074d94846056ae7009381714bff"
      }
    jenkins_plugins:
      - "ant"
      - "antisamy-markup-formatter"
      - "build-timeout"
      - "cloudbees-folder"
      - "credentials-binding"
      - "email-ext"
      - "git"
      - "gradle"
      - "ldap"
      - "mailer"
      - "matrix-auth"
      - "pam-auth"
      - "pipeline-stage-view"
      - "ssh-slaves"
      - "subversion"
      - "timestamper"
      - "workflow-aggregator"
      - "github-organization-folder"
      - "ws-cleanup"
  tasks:

    - set_fact:
        jenkins_root_user="{{ jenkins_users | selectattr("root", "equalto", "true") | map(attribute='name') | join(',') }}"
        jenkins_root_password="{{ jenkins_users | selectattr("root", "equalto", "true") | map(attribute='password') | join(',') }}"

    - debug: msg="using '{{ jenkins_root_user }}' as jenkins root user"

    - name: "install java8"
      apt: name=openjdk-8-jdk update_cache=yes cache_valid_time=3600

    - name: "create jenkins user"
      user: name={{jenkins_user}} comment="jenkins user" home={{jenkins_user_home}}

    - name: "create jenkins home"
      file: path={{jenkins_home}} state=directory owner={{jenkins_user}} group={{jenkins_user}}

    - name: "download jenkins war"
      get_url:
        url="{{jenkins_war_url}}" dest="{{jenkins_user_home}}/jenkins.war"
        owner={{jenkins_user}} group={{jenkins_user}} mode=0555
        checksum="{{jenkins_war_checksum}}"

    - name: "create systemd service"
      template: src=templates/jenkins.service.j2 dest=/etc/systemd/system/jenkins.service

    - name: "stop service"
      service: name=jenkins state=stopped

    - name: "create jenkins config"
      template: src=templates/config.xml.j2 dest="{{jenkins_home}}/config.xml"

    - name: Install needed packages
      apt: pkg={{item}} state=installed
      with_items:
        - ruby
        - ruby-dev
        - make
        - gcc
        - docker.io

    - name: "install bcrpyt gem"
      shell: "gem install bcrypt"

    - name: "add jenkins user to docker group"
      user: name="{{jenkins_user}}" groups="docker"
      notify:
        - restart docker

    - name: "start docker daemon"
      service: name=docker state=started

    - shell: "echo \"require 'bcrypt'; puts BCrypt::Password.create('{{item.password}}')\" | irb --noverbose --noecho"
      with_items: "{{jenkins_users}}"
      register: jenkins_users_passwords

    - name: "create jenkins users dirs"
      file: path={{jenkins_home}}/users/{{item.name}} state=directory owner={{jenkins_user}} group={{jenkins_user}}
      with_items: "{{jenkins_users}}"

    - name: "create root jenkins user"
      template: src=templates/user.config.xml.j2 dest="{{jenkins_home}}/users/{{item.0.name}}/config.xml"
      with_together:
        - "{{jenkins_users}}"
        - "{{jenkins_users_passwords.results}}"
      when: item.0.root == 'true'

    - include: tasks/restart_jenkins.yml

    - name: "download jenkins cli"
      get_url:
        url="{{jenkins_base_url}}/jnlpJars/jenkins-cli.jar" dest="{{jenkins_user_home}}/jenkins-cli.jar"
        owner={{jenkins_user}} group={{jenkins_user}} mode=0555

    - name: "installing plugins"
      shell: "java -jar {{jenkins_user_home}}/jenkins-cli.jar -s {{jenkins_base_url}} install-plugin --username {{jenkins_root_user}} --password {{jenkins_root_password}} {{item}}"
      with_items: "{{ jenkins_plugins }}"

    - include: tasks/restart_jenkins.yml

    - name: "create script dir"
      file: path={{jenkins_home}}/scripts state=directory owner={{jenkins_user}} group={{jenkins_user}}

    - name: "creating credential scripts"
      template: src=templates/create_organization_credentials.groovy.j2 dest="{{jenkins_home}}/scripts/{{item.organization}}.groovy"
      with_items: "{{ jenkins_organization_folders }}"

    - name: "executing credential scripts"
      shell: "java -jar {{jenkins_user_home}}/jenkins-cli.jar -s {{jenkins_base_url}} groovy --username {{jenkins_root_user}} --password {{jenkins_root_password}} {{jenkins_home}}/scripts/{{item.organization}}.groovy"
      with_items: "{{ jenkins_organization_folders }}"

    - name: "create organization folder job dirs"
      file: path={{jenkins_home}}/jobs/{{item.name}} state=directory owner={{jenkins_user}} group={{jenkins_user}}
      with_items: "{{jenkins_organization_folders}}"

    - name: "create organization folder jobs"
      template: src=templates/organization_folder.xml.j2 dest="{{jenkins_home}}/jobs/{{item.name}}/config.xml"
      with_items: "{{jenkins_organization_folders}}"

    - include: tasks/restart_jenkins.yml

    - name: "trigger initial repository scan"
      command: "curl -X POST {{jenkins_base_url}}/job/{{item.name}}/build --user {{jenkins_root_user}}:{{jenkins_root_password}}"
      with_items: "{{ jenkins_organization_folders }}"

#    - name: "trigger initial repository scan"
#      command: "curl -X POST {{jenkins_base_url}}/job/{{item.name}}/build --user {{jenkins_root_user}}:{{jenkins_root_password}}"
#      with_items: "{{ jenkins_organization_folders }}"
